.PROGRAM rb1.next.pk.que(rob.no, model, next.loc)
;
; ABSTRACT:
;
; INPUTS:
;
; OUTPUTS:
;
; SIDE EFFECTS:
;
; DATA STRUCT:
;
; MISC:  Program created in ACE version 3.8.3.150
;
;* Copyright (c) 2020 by SungJoon
        GLOBAL REAL pick.encoder, pick.queue
        GLOBAL LOC pick.wait, pick.offset, %pick.belt
        LOCAL REAL peek, part.good
        LOCAL REAL model.idx1, model.idx2, encoder.idx1, encoder.idx2, vision.x, vision.y, vision.rot
        LOCAL REAL encoder.idx, distance, belt.pick.time
        LOCAL LOC loc, inst.loc, tmp.loc, offset
        LOCAL LOC inst.loc1, inst.loc2
        LOCAL jt[], tmp.loc1, tmp.loc2
        LOCAL grip.trans

        belt.pick.time = 0.3    ; Amount of time (in seconds) it will take the robot to pick the instance

        peek = 2

        part.exist = FALSE

        model = -1
        SET next.loc = NULL

  ;Get Data from Queue#1(Good Part).Don't clear Queue
        CALL rn.get.part(pick.queue[1,1], peek, inst.loc1, model.idx1, encoder.idx1, vision.x, vision.y, vision.rot)
  ;Get Data from Queue#2(Ng Part)
        CALL rn.get.part(pick.queue[1,2], peek, inst.loc2, model.idx2, encoder.idx2, vision.x, vision.y, vision.rot)

 ;If two queue data is valid,
     ;the data is processed first by comparing the got data
        IF (model.idx1 <> -1) AND (model.idx2 <> -1) THEN
            SETBELT %pick.belt[1,1] = encoder.idx1
            SET tmp.loc1 = %pick.belt[1,1]:inst.loc1

            SETBELT %pick.belt[1,1] = encoder.idx2
            SET tmp.loc2 = %pick.belt[1,1]:inst.loc2

            IF DY(tmp.loc1) >= DY(tmp.loc2) THEN
                SET tmp.loc = inst.loc1
                encoder.idx = encoder.idx1
                part.good = TRUE
            ELSE
                SET tmp.loc = inst.loc2
                encoder.idx = encoder.idx2
                part.good = FALSE
            END

            model = 0
        ELSE
            IF (model.idx1 <> -1) THEN
                SET tmp.loc = inst.loc1
                encoder.idx = encoder.idx1
                part.good = TRUE
                model = 0
            ELSE
                IF (model.idx2 <> -1) THEN
                    SET tmp.loc = inst.loc2
                    encoder.idx = encoder.idx2
                    part.good = FALSE
                    model = 0
                ELSE
                    GOTO 100
                END
            END
            SETBELT %pick.belt[1,1] = encoder.idx
        END

    ;Check Part Position and select gripper
        IF vision.x >= pk.ref.x.val[rob.no] THEN
            SET grip.trans = grip.tool[rob.no,1]
        ELSE
            SET grip.trans = grip.tool[rob.no,2]
        END

        IF part.good THEN
            SET offset = pick.ok.offset[rob.no]
        ELSE
            SET offset = pick.ng.offset[rob.no]
        END

        SET loc = tmp.loc:offset
        SET loc = loc:INVERSE(grip.trans)

        SET next.loc = %pick.belt[1,1]:loc

        distance = WINDOW(%pick.belt[1,1]:next.loc,belt.pick.time,1)
        IF distance < 0 THEN
            model = -1
        END

 100    
        RETURN
.END
